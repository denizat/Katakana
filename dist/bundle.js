(() => {
  "use strict";
  var __webpack_modules__ = {
      206: () => {
        eval(
          '\n;// CONCATENATED MODULE: ./src/config.ts\nvar Config = /** @class */ (function () {\n    function Config() {\n        this.bookMarks = [];\n        this.searchModes = [];\n    }\n    Config.prototype.addColumn = function (columnName, columnHotkey) {\n        this.bookMarks.push({\n            name: columnName,\n            hotkey: columnHotkey,\n            rows: [],\n        });\n    };\n    Config.prototype.addRow = function (rowName, rowHotkey, rowLink) {\n        this.bookMarks[this.bookMarks.length - 1].rows.push({\n            name: rowName,\n            hotkey: rowHotkey,\n            link: rowLink,\n        });\n    };\n    Config.prototype.addMode = function (modeName, modeHotkey, modeLinkOrPrefix) {\n        this.searchModes.push({\n            name: modeName,\n            hotkey: modeHotkey,\n            linkOrPrefix: modeLinkOrPrefix,\n        });\n    };\n    return Config;\n}());\nvar config = new Config();\n/**\n * Can have aliases like:\n * const ac = config.addColumn\n * const ar = config.addRow\n * const am = config.addMode\n */\nconfig.addColumn("School", "KeyS");\nconfig.addRow("Canvas", "KeyC", "https://lcisd.instructure.com/");\nconfig.addRow("Office", "KeyO", "https://www.office.com/?auth=2");\nconfig.addRow("TAMU NSC", "KeyT", "https://applicant.tamu.edu/NSC/Applicant/NscRegistered");\nconfig.addColumn("Git", "KeyG");\nconfig.addRow("Repos", "KeyR", "https://github.com/denizat?tab=repositories");\nconfig.addColumn("Social", "KeyM");\nconfig.addRow("Gmail", "KeyM", "https://mail.google.com/mail/u/0/#inbox");\nconfig.addMode("G**GLE", "KeyG", "https://google.com/search?q=");\nconfig.addMode("Searx", "KeyS", "https://searx.info/search?q=");\nconfig.addMode("Duck Duck Go", "KeyD", "https://duckduckgo.com/?q=");\nconfig.addMode("Arch Linux", "KeyA", "Arch Linux ");\nconfig.addMode("Typescript", "KeyT", "Typescript ");\n// config.defaultSearchLink = "https://duckduckgo.com/";\nconfig.defaultSearchLink = config.searchModes[0].linkOrPrefix;\nconfig.zenMode = false;\nconfig.styles = ["./styles/Typewriter.css"];\nvar cfg = config;\n\n;// CONCATENATED MODULE: ./src/links.ts\n\n// Gets the max row among all columns so that we can have them be an even height, might remove this if there is a css solution but I don\'t know css so its here for now.\nvar max = 0;\ncfg.bookMarks.forEach(function (column) {\n    if (column.rows.length > max) {\n        max = column.rows.length;\n    }\n});\nvar container = document.getElementById("container");\ncfg.bookMarks.forEach(function (column) {\n    var col = document.createElement("div");\n    var text = document.createElement("p");\n    text.innerHTML = column.name + " [" + column.hotkey[3].toLowerCase() + "]";\n    col.appendChild(text);\n    column.rows.forEach(function (row) {\n        var link = document.createElement("a");\n        link.setAttribute("href", row.link);\n        link.className = "link";\n        link.innerHTML = row.name + " [" + row.hotkey[3].toLowerCase() + "]";\n        col.appendChild(link);\n        if (0 < column.rows.length % max) {\n            for (var i = 0; i < (column.rows.length % max) + 1; i++) {\n                var link_1 = document.createElement("a");\n                link_1.className = "link null";\n                link_1.innerHTML = "link null";\n                col.appendChild(link_1);\n            }\n        }\n    });\n    container.appendChild(col);\n});\n\n;// CONCATENATED MODULE: ./src/style.ts\n\nvar head = document.getElementsByTagName("head")[0];\nvar style_link = document.createElement("link");\nstyle_link.rel = "stylesheet";\nstyle_link.type = "text/css";\nstyle_link.href = cfg.styles[Math.floor(Math.random() * cfg.styles.length)];\nstyle_link.media = "all";\nhead.appendChild(style_link);\n\n;// CONCATENATED MODULE: ./src/modes.ts\n\nvar DOMMode = document.getElementById("mode");\ncfg.searchModes.forEach(function (mode) {\n    var opt = document.createElement("option");\n    opt.setAttribute("value", mode.linkOrPrefix);\n    opt.innerHTML = mode.name + " [" + mode.hotkey[3].toLowerCase() + "]";\n    DOMMode.appendChild(opt);\n});\ndocument.getElementById("mode").value =\n    cfg.defaultSearchLink;\ndocument.getElementById("search").action =\n    cfg.defaultSearchLink;\n\n;// CONCATENATED MODULE: ./src/keyHandler.ts\n\n// Stores the last key so we can switch between shortcut modes\nvar lastKey = undefined;\n// Stores the column that is selected from the shortcut combination\nvar column = undefined;\n/**\n * Handles all of the keypresses\n */\ndocument.addEventListener("keypress", function (key) {\n    // We check in order of most specific to least specific.\n    if (column !== undefined) {\n        // We could put the only one row check here and some computation, but it would cause an extra key press\n        column.rows.forEach(function (row) {\n            if (row.hotkey === key.code) {\n                window.location.assign(row.link);\n            }\n        });\n        column = undefined;\n    }\n    else if (lastKey === "KeyM") {\n        cfg.searchModes.forEach(function (mode) {\n            if (mode.hotkey === key.code) {\n                document.getElementById("mode").value =\n                    mode.linkOrPrefix;\n                document.getElementById("search").action =\n                    mode.linkOrPrefix;\n            }\n        });\n        // If the user is selecting a mode, then the next thing they will do is type something in the search engine\n        document.getElementById("input_box").focus();\n        lastKey = undefined;\n    }\n    else if (lastKey === "KeyL") {\n        cfg.bookMarks.forEach(function (bookmarkColumn) {\n            if (bookmarkColumn.hotkey === key.code) {\n                // Wastes some computation but prevents from having to press again.\n                if (bookmarkColumn.rows.length === 1) {\n                    window.location.assign(bookmarkColumn.rows[0].link);\n                }\n                column = bookmarkColumn;\n            }\n        });\n        lastKey = undefined;\n    }\n    else {\n        if (document.activeElement.id !== "input_box") {\n            switch (key.code) {\n                case "KeyS":\n                    key.preventDefault();\n                    document.getElementById("input_box").focus();\n                    break;\n                case "KeyM":\n                    lastKey = "KeyM";\n                    document.getElementById("mode").focus();\n                    break;\n                case "KeyL":\n                    lastKey = "KeyL";\n                    break;\n                default:\n                    lastKey = undefined;\n                    break;\n            }\n        }\n    }\n});\n\n;// CONCATENATED MODULE: ./src/searchHandler.ts\n\nvar hasHTTP = /http*/;\ndocument.getElementById("search").onsubmit = function (form) {\n    form.preventDefault();\n    if (hasHTTP.test(document.getElementById("mode").value)) {\n        window.location.assign(document.getElementById("mode").value +\n            document.getElementById("input_box").value);\n    }\n    // We have to have an else here because js goes too fast and does the second thing before the first.\n    else {\n        window.location.assign(\n        // console.log(\n        cfg.defaultSearchLink +\n            document.getElementById("mode").value +\n            document.getElementById("input_box").value);\n    }\n};\n\n;// CONCATENATED MODULE: ./src/index.ts\n\n\n\n\n\n\n\n//# sourceURL=webpack:///./src/index.ts_+_6_modules?'
        );
      },
    },
    __webpack_exports__ = {};
  __webpack_modules__[206]();
})();
